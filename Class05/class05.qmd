---
title: "Class 5: ggplot"
author: "Dhruv"
format: pdf
---

Making figures and graphs with R
**"base" R** is the default program to make plots. This can be accessed using the `plot()` function. 

```{r}
cars
plot(cars)
```
Popular package to do data visualization is **ggplot2**


ggplot(cars) - this wont work

Before using an add-on package we must first install it: `install.packages("ggplot2")`. Next, this must be loaded. 

```{r}
library(ggplot2)
ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point()
```
"base" r is shorter for simpler graphs, and **ggplot** works better for complex graphs. Let's try to make the above plot more complex now

```{r}
library(ggplot2)
ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point() +
  geom_smooth()
```

Every ggplot has at minimum 3 layers 

- **data** (data.frame with things you want to plot)
- **aes**thetics**
- **geoms**s - quite a few including `geom_line()`, `geom_col()`, `geom_point()`

```{r}
head(mtcars)
```
ggplot
```{r}
ggplot(mtcars) + 
  aes(x = mpg, y = disp, size = hp, col = am) + 
  geom_point() 
  
```
Now color all points blue 
```{r}
ggplot(mtcars) + 
  aes(x = mpg, y = disp, size = hp) + 
  geom_point(col = "blue") 
```
can make the old plot faceted
```{r}
ggplot(mtcars) + 
  aes(x = mpg, y = disp, size = hp) + 
  geom_point(col = "blue") + 
  facet_wrap("am")

```
Now we will work through the lab sheet

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)

p <- ggplot(genes) + aes(x = Condition1, y = Condition2, col = State) + 
  geom_point()
```
```{r}
p + scale_color_manual(values = c("blue", "grey","red")) + labs(title = "My Practice Plot", x = "Control (No Drug)", y = "Drug Treatment") + theme(plot.title = element_text(hjust = 0.5))
```

```{r}
nrow(genes)
```

There are `r nrow(genes)` genes in this dataset

The `table()` function is useful to look at how many of each entries are there. this is compared to `unique()` which tells you the actual unique variables but not how many of each. 

```{r}
table(genes$State)
```
What fraction are up, down, or unchanging. Total genes = `nrow(genes)`. Can divide table by this. 

```{r}
colnames(genes)
ncol(genes)
nrow(genes)
round(table(genes$State)/nrow(genes), 3)*100
```
> Key points:
Saving plots with **ggsave()**
"types" of plots with `geoms_
Multi-plot layout with **patchwork** package

```{r}
ggplot(mtcars) +
  aes(mpg, disp) + 
  geom_point()
ggsave("myplot.pdf")

```

